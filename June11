import java.util.*;

public class Test {

  public Test() {
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		Test test = new Test();

		System.out.println(test
				.allUnique("asjioghpewhoiengehkdsj;kljfa;dsf0394q8r0943qt"));
		System.out.println(test.isPermutation("ACd", "dac"));
		System.out.println(test.replace("a b c         "));
		System.out.println(test.compression("acbbbbb"));
		int[][] twoDAry = new int[][] { { 2, 3, 4, 5 }, { 6, 7, 8, 9 },
				{ 10, 11, 12, 13 }, { 14, 15, 16, 17 } };
		int[][] afRotate = test.rotate(twoDAry, 4);
		for (int i = 0; i < afRotate.length; i++) {
			for (int j = 0; j < afRotate.length; j++) {
				System.out.print(" " + afRotate[i][j]);
			}
			System.out.println("");
		}

		int[][] twoDAry2 = new int[][] { { 1, 2, 3, 4 }, { 5, 0, 7, 8 },
				{ 9, 10, 11, 0 }, { 13, 14, 0, 16 } };
		int[][] afZero = test.setZero2(twoDAry2);
		for (int i = 0; i < afZero.length; i++) {
			for (int j = 0; j < afZero.length; j++) {
				System.out.print(" " + afZero[i][j]);
			}
			System.out.println("");
		}
		Node a = new Node(1);
		Node b = new Node(2);
		Node c = new Node(3);
		Node e = new Node(4);
		Node f = new Node(2);
		Node g = new Node(1);
		Node h = new Node(5);
		a.next = b;
		b.next = c;
		c.next = e;
		e.next = f;
		f.next = g;
		g.next = h;
		h.next = null;
		removeDup(a);
		System.out.println("New list is now" + a.data + a.next.data
				+ a.next.next.data);
	}

	// 1.1
	public boolean allUnique(String s) {
		if (s.length() > 256) {
			return false;
		}
		boolean[] boolArray = new boolean[256];
		for (int i = 0; i < s.length(); i++) {
			if (boolArray[(int) s.charAt(i)] = false)
				boolArray[(int) s.charAt(i)] = true;

			else
				return false;

		}
		return true;
	}

	// 1.3 way1:count each char then compare
	public boolean isPermutation(String s1, String s2) {
		if (s1.length() != s2.length())
			return false;
		int[] counters = new int[256];// ASCII
		char[] chaArray1 = s1.toCharArray();
		for (char c : chaArray1) {
			counters[c]++;
		}
		char[] chaArray2 = s2.toCharArray();
		for (char c : chaArray2) {
			counters[c]--;
			if (counters[c] < 0)
				return false;
		}
		return true;
	}

	// 1.4
	public String replace(String s) {

		int j = 0;
		// count the number of spaces, then calculate the new array's length
		for (int i = 0; i < s.length(); i++) {

			char c = s.charAt(i);
			if (c == ' ') {
				j++;
			}

		}
		char[] repAry = new char[s.length() + j * 2];
		// number of spaces*2 is the added length the new array;
		j = 0;
		for (int l = 0; l < s.length(); l++) {
			char m = s.charAt(l);
			if (m != ' ') {
				repAry[j] = m;
				j++;
			} else {
				repAry[j] = '%';
				repAry[j + 1] = '2';
				repAry[j + 2] = '0';
				j += 3;
			}

		}
		return new String(repAry);
	}

	// 1.5

	public String compression(String s) {
		StringBuffer strB = new StringBuffer();
		int j = 1;
		for (int i = 1; i < s.length(); i++) {
			if (s.charAt(i) == s.charAt(i - 1)) {
				j++;
				continue;
			}
			strB.append(s.charAt(i - 1) + "" + j);
			j = 1;
		}
		strB.append(s.charAt(s.length() - 1) + "" + j);
		if (strB.length() < s.length())
			return strB.toString();

		return s;
	}

	// 1.6
	public int[][] rotate(int[][] matrix, int n) {
		int temp = 0;
		for (int layer = 0; layer < n / 2; layer++) {
			int last = n - 1 - layer;
			int length = n - 2 * layer;
			for (int i = 0; i < length - 1; i++) {

				temp = matrix[layer][layer + i];

				matrix[layer][layer + i] = matrix[last - i][layer];

				matrix[last - i][layer] = matrix[last][last - i];

				matrix[last][last - i] = matrix[layer + i][last];

				matrix[layer + i][last] = temp;
			}
		}
		return matrix;
	}

	// 1.7 way 1
	public int[][] setZero(int[][] matrix) {
		// matrix.length=#of rows; matrix[0].length=#of columns
		int a = matrix.length;
		int b = matrix[0].length;
		boolean[][] isZero = new boolean[a][b];
		for (int i = 0; i < a; i++) {
			for (int j = 0; j < b; j++) {
				if (matrix[i][j] == 0) {
					System.out.println("find 0 in matrix: " + i + j);
					isZero[i][j] = true;
				}
			}

		}
		for (int m = 0; m < a; m++) {
			for (int n = 0; n < b; n++) {
				if (isZero[m][n]) {
					System.out.println("find 0 in flag matrix: " + m + n);
					for (int l = 0; l < a; l++)
						matrix[l][n] = 0;
					for (int h = 0; h < b; h++)
						matrix[m][h] = 0;
				}
			}
		}
		return matrix;
	}

	// 1.7 way2
	public int[][] setZero2(int[][] matrix) {
		// matrix.length=#of rows; matrix[0].length=#of columns
		int a = matrix.length;
		int b = matrix[0].length;
		boolean[] isZeroRow = new boolean[a];
		boolean[] isZeroCol = new boolean[b];
		for (int i = 0; i < a; i++) {
			for (int j = 0; j < b; j++) {
				if (matrix[i][j] == 0) {
					// System.out.println("find 0 in matrix: "+i+j);
					isZeroRow[i] = true;
					isZeroCol[j] = true;
				}
			}

		}
		for (int m = 0; m < a; m++) {
			for (int n = 0; n < b; n++) {
				if (isZeroRow[m] || isZeroCol[n]) {
					matrix[m][n] = 0;
				}
			}
		}
		return matrix;
	}

	// 1.8
	public boolean isRotate(String s1, String s2) {
		if (s1.length() != s2.length() || s1.length() == 0 || s2.length() == 0)
			return false;
		else {
			return isSubstring(s1 + s1, s2);

		}
	}

	public boolean isSubstring(String m, String n) {
		return true;
	}

	// 2.1 (have buffer) O(n)
	public static void removeDup(Node n) {
		Hashtable<Integer, Boolean> ht = new Hashtable<Integer, Boolean>();
		Node l = null;
		while (n != null) {
			if (!ht.containsKey(n.data)) {
				ht.put(n.data, true);
				l = n;
			}

			else {
				l.next = n.next;// 等式右边是具体的对象 左边是指向对象的指针

			}
			n = n.next;
		}

	}

	// 2.1 (no buffer) O(N^2)
	public static void removeDup2(Node n) {
		Node current = n;
		Node runner = n;
		while (current != null) {
			runner = current;
			while (runner.next != null) {
				if (runner.next.data == current.data) {
					runner.next = runner.next.next;// 右：runner.next.next
													// 是runner所指的下一个的下一个对象；左：runner.next
													// 是runner所指对象的next域的指向外面的指针

				} else
					runner = runner.next;
			}
			current = current.next;

		}

	}

	// 2.2(iterative)(O(n)time and O(1)space)
	public Node findK(Node n, int k) {
		Node current = n;
		Node runner = n;
		if (k < 0)
			return null;
		for (int i = 0; i < k; i++) {
			if (runner != null) {
				runner = runner.next;
			} else
				return null;
		}
		while (runner.next != null) {
			current = current.next;
			runner = runner.next;
		}
		return current;

	}

	// 2.2(recursive)
	public int findKrecursive(Node n, int k) {
		if (n == null) {
			return 0;
		}
		int i = findKrecursive(n.next, k) + 1;
		if (i == k) {
			System.out.println(n.data);
		}
		return i;
	}

	// 2.3 (O(1))
	public void deleteNode(Node n) {
		if (n != null && n.next != null) {
			n.data = n.next.data;
			n.next = n.next.next;
		}
		if (n.next == null) {
			n = null;
		}
	}

	// 2.4(O(1))
	public Node partition(Node n, int x) {
		if (n == null)
			return null;
		Node sm = null;
		Node mid = null;
		Node lg = null;
		Node stsm = null;
		Node stmid = null;
		Node stlg = null;
		while (n != null) {
			if (n.data < x) {
				if (sm == null) {
					stsm = n;
					sm = n;
				}

				else {
					sm.next = n;
					sm = sm.next;
				}
				n = n.next;
			}
			if (n.data == x) {
				if (mid == null) {
					stmid = n;
					mid = n;
				} else {
					mid.next = n;
					mid = mid.next;
				}
				n = n.next;
			}
			if (n.data > x) {
				if (lg == null) {
					stlg = n;
					lg = n;
				} else {
					lg.next = n;
					lg = lg.next;
				}
				n = n.next;
			}
		}
		if (sm == null) {
			if (mid != null && lg != null) {
				mid.next = stlg;
				return stmid;
			}
			if (mid != null && lg == null) {
				return stmid;
			} else {
				return stlg;
			}
		} else {
			if (mid != null && lg == null) {
				sm.next = stmid;
				return stsm;
			}
			if (mid == null && lg != null) {
				sm.next = stlg;
				return stsm;
			} else {
				return stsm;
			}
		}

	}

	// 2.5
	public Node addList(Node l1, Node l2, int carry) {

		if (l1 == null && l2 == null) {
			return null;
		}
		int value=carry;
		if(l1!=null){
			value+=l1.data;
		}
		if(l2!=null){
			value+=l2.data;
		}
		Node result=new Node(value%10);
		if(l1!=null||l2!=null||value>=10){
			Node more=addList(l1==null?null:l1.next,l2==null?null:l2.next,value>=10?1:0);
			result.setNext(more);
		}
		return result;
	}

	
}
